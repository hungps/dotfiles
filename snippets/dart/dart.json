{
  "main": {
    "prefix": "main",
    "description": "Insert a main function, used as an entry point.",
    "body": [
      "main(List<String> args) {",
      "  $0",
      "}"
    ]
  },
  "try": {
    "prefix": "try",
    "description": "Insert a try/catch block.",
    "body": [
      "try {",
      "  $0",
      "} catch (${1:e}) {",
      "}"
    ]
  },
  "if": {
    "prefix": "if",
    "description": "Insert an if statement.",
    "body": [
      "if ($1) {",
      "  $0",
      "}"
    ]
  },
  "if else": {
    "prefix": "ife",
    "description": "Insert an if statement with an else block.",
    "body": [
      "if ($1) {",
      "  $0",
      "} else {",
      "}"
    ]
  },
  "switch case": {
    "prefix": "switch",
    "description": "Insert a switch statement.",
    "body": [
      "switch ($1) {",
      "  case $2:",
      "    $0",
      "  default:",
      "}"
    ]
  },
  "for in": {
    "prefix": "fori",
    "description": "Insert a for-in loop.",
    "body": [
      "for (var ${1:item} in ${2:items}) {",
      "  $0",
      "}"
    ]
  },
  "while": {
    "prefix": "while",
    "description": "Insert a while loop.",
    "body": [
      "while ($1) {",
      "  $0",
      "}"
    ]
  },
  "do while": {
    "prefix": "do",
    "description": "Insert a do-while loop.",
    "body": [
      "do {",
      "  $0",
      "} while ($1);"
    ]
  },
  "fun": {
    "prefix": "fun",
    "description": "Insert a function definition.",
    "body": [
      "${3:void} ${1:name}(${2:args}) {",
      "  $0",
      "}"
    ]
  },
  "typedef": {
    "prefix": "typedef",
    "description": "Insert a typedef.",
    "body": "typedef ${1:Type} ${2:Name}(${3:params});"
  },
  "test": {
    "prefix": "test",
    "description": "Insert a test block.",
    "body": [
      "test('$1', () {",
      "  $0",
      "});"
    ]
  },
  "group": {
    "prefix": "group",
    "description": "Insert a test group block.",
    "body": [
      "group('$1', () {",
      "  $0",
      "});"
    ]
  },
  "print message": {
    "prefix": "pri",
    "body": [
      "print('${1:message}');"
    ],
    "description": "Print message"
  },
  "Scaffold widget snippet": {
    "prefix": "Scaff",
    "body": [
      "Scaffold(",
      "  appBar: AppBar(",
      "    title: Text('${1:Title}'),",
      "  ),",
      "  body: ${2:Container()}${0},",
      ");"
    ],
    "description": "Scaffold widget snippet"
  },
  "Stateless Widget": {
    "prefix": "stless",
    "body": [
      "class ${1:name} extends StatelessWidget {",
      "  const ${1:name}({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return ${2:child};",
      "  }",
      "}"
    ],
    "description": "Create a Stateless widget"
  },
  "Stateful Widget": {
    "prefix": "stfull",
    "body": [
      "class ${1:name} extends StatefulWidget {",
      "  ${1:name}({super.key});",
      "",
      "  @override",
      "  State<${1:name}> createState() => _${1:name}State();",
      "}",
      "",
      "class _${1:name}State extends State<${1:name}> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return ${2:child};",
      "  }",
      "}"
    ],
    "description": "Create a Stateful widget"
  },
  "Build Method": {
    "prefix": "build",
    "body": [
      "@override",
      "Widget build(BuildContext context) {",
      "  return ${0:};",
      "}"
    ],
    "description": "Describes the part of the user interface represented by this widget."
  },
  "Custom Painter ": {
    "prefix": "CustomPainter",
    "body": [
      "class ${0:name}Painter extends CustomPainter {",
      "",
      "  @override",
      "  void paint(Canvas canvas, Size size) {",
      "",
      "  }",
      "",
      "  @override",
      "  bool shouldRepaint(${0:name}Painter oldDelegate) => false;",
      "",
      "  @override",
      "  bool shouldRebuildSemantics(${0:name}Painter oldDelegate) => false;",
      "}"
    ],
    "description": "Used for creating custom paint"
  },
  "Custom Clipper ": {
    "prefix": "CustomClipper",
    "body": [
      "class ${0:name}Clipper extends CustomClipper<Path> {",
      "",
      "  @override",
      "  Path getClip(Size size) {",
      "",
      "  }",
      "",
      "  @override",
      "  bool shouldReclip(CustomClipper<Path> oldClipper) => false;",
      "}"
    ],
    "description": "Used for creating custom shapes"
  },
  "InitState ": {
    "prefix": "initS",
    "body": [
      "@override",
      "void initState() { ",
      "  super.initState();",
      "",
      "  ${0:}",
      "}"
    ],
    "description": "Called when this object is inserted into the tree. The framework will call this method exactly once for each State object it creates."
  },
  "Dispose": {
    "prefix": "dis",
    "body": [
      "@override",
      "void dispose() { ",
      "  ${0:}",
      "",
      "  super.dispose();",
      "}"
    ],
    "description": "Called when this object is removed from the tree permanently. The framework calls this method when this State object will never build again."
  },
  "didChangeDependencies": {
    "prefix": "didChangeD",
    "body": [
      "@override",
      "void didChangeDependencies() {",
      "  super.didChangeDependencies();",
      "",
      "  ${0:}",
      "}"
    ],
    "description": "Called when a dependency of this State object changes"
  },
  "didUpdateWidget": {
    "prefix": "didUpdateW",
    "body": [
      "@override",
      "void didUpdateWidget (${1:Type} ${2:oldWidget}) {",
      "  super.didUpdateWidget(${2:oldWidget});",
      "  ${0:}",
      "}"
    ],
    "description": "Called whenever the widget configuration changes."
  },
  "ListView.Builder": {
    "prefix": "ListView.b",
    "body": [
      "ListView.builder(",
      "  itemCount: ${1:1},",
      "  itemBuilder: (context, index) {",
      "    return ${2:};",
      "  },",
      "),"
    ],
    "description": "ListView.builder"
  },
  "ListView.Separated": {
    "prefix": "ListView.s",
    "body": [
      "ListView.separated(",
      "  itemCount: ${1:1},",
      "  separatorBuilder: (_, index) => ${2:},",
      "  itemBuilder: (context, index) {",
      "    return ${3:};",
      "  },",
      "),"
    ],
    "description": "ListView.separated"
  },
  "CustomScrollView": {
    "prefix": "CustomScrollV",
    "body": [
      "CustomScrollView(",
      "  slivers: <Widget>[",
      "    ${0:},",
      "  ],",
      "),"
    ],
    "description": "CustomScrollView"
  },
  "debugPrint": {
    "prefix": "debugP",
    "body": [
      "debugPrint(${1:statement});"
    ],
    "description": "Prints a message to the console, which you can access using the flutter tool's `logs` command (flutter logs)."
  },
  "Flutter Row widget snippet": {
    "prefix": "Row",
    "body": [
      "Row(",
      "  children: [",
      "    ${0},",
      "  ],",
      "),"
    ],
    "description": "Row"
  },
  "Flutter Column widget snippet": {
    "prefix": "Col",
    "body": [
      "Column(",
      "  children: [",
      "    ${0},",
      "  ],",
      "),"
    ],
    "description": "Column"
  },
  "SizedBox.shrink": {
    "prefix": "SizeB",
    "body": [
      "const SizedBox.shrink(),"
    ],
    "description": "SizedBox.shrink"
  }
}
